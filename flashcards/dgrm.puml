@startuml
!pragma layout smetana                       ' горизонтальная ориентация

'‑‑‑ Цвета состояний
skinparam state<<New>>        BackgroundColor LightBlue
skinparam state<<Learning>>   BackgroundColor LightYellow
skinparam state<<Review>>     BackgroundColor LightGreen
skinparam state<<Relearning>> BackgroundColor LightSalmon

[*] --> New

state New <<New>>

New --> Learning : показать карту

state Learning <<Learning>>
Learning : Фаза обучения\n(10 м → 1 дн)

' ——— переходы внутри Learning ———
Learning --> Learning
note on link
  **Again** — повторить тот же шаг
  **Hard**  — тот же шаг × HardFactor
end note

Learning --> Review
note on link
  **Good** (последний шаг) — выпуск в Review
  **Easy** — выпуск в Review, интервал 2 дн
end note

state Review <<Review>>
Review : Повторение по SRS

' ——— переходы внутри Review ———
Review --> Review
note on link
  **Hard** — ivl × hardFactor
  **Good** — ivl × easeFactor
  **Easy** — ivl × easeFactor × easyBonus
end note

Review --> Relearning
note on link
  **Again** — ошибка ⇒ карта в Relearning
end note

state Relearning <<Relearning>>
Relearning : Шаги переобучения

Relearning --> Review : по завершении шагов
@enduml

@startuml
|User|
start

:Получить prevIvl из cards.ivl;
:Вычислить delay = daysLate(card);

if (ответ = Again?) then (да)
  :Перевести карточку в Relearning;
  stop
else (нет)
  if (ответ = Hard?) then (да)
    :newIvl = prevIvl * hardInterval * intervalModifier;
  else (нет)
    if (ответ = Good?) then (да)
      :newIvl = (prevIvl + delay/2) * ease * intervalModifier;
    else
      :newIvl = (prevIvl + delay) * ease * easyBonus * intervalModifier;
    endif
  endif
endif

:Ограничить newIvl (≥1, ≤maxInterval);
:Сохранить newIvl в cards.ivl;
stop
@enduml

@startuml
title Цикл активное воспоминание
left to right direction

state S1 as "Чтение"
state S2 as "Активное\nвоспоминание"
state S3 as "Повторение"

[*] --> S1
S1 --> S2
S2 --> S3
S3 --> S1
@enduml

@startuml
' ========== SEQUENCE: Режим обучения ==========
autonumber
skinparam sequenceMessageAlign center

actor  Пользователь as User
participant "Компонент\nRepeatCards (React)"    as react
participant "Сервер"              as serv
database   "PostgreSQL"                         as db

== 1. Старт сессии обучения ==
User   -> react  : клик «Начать обучение»
react  -> serv : http запрос
serv    -> db   : SELECT карточки, \nкоторые надо просмотреть
db     --> serv
serv -> db : UPDATE новые карточки
serv    --> react : список с интервалами
react --> User  : отрисовать карты

== 2. Ответ пользователя на карточку ==
loop пока есть карточки
  User -> react : Оценить карточку
  react  -> serv : http запрос
  serv -> serv : выполнить алгоритм \nинтервального повторения
  serv    -> db   : UPDATE SRS‑полей
  react --> User : показать следующую карту
end

== 3. Завершение сессии ==
react --> User : «Все карточки\nпройдены»
@enduml

'Диаграмма классов
@startuml
' Небольшая настройка: убираем иконки у атрибутов
skinparam classAttributeIconSize 0

' ======= Сущности (Entity) =======
class User <<entity>> {
  +id : Integer
  +email : String
  +password : String
}

class Collection <<entity>> {
  +id : Integer
  +name : String
  +createdAt : LocalDateTime
}

class Card <<entity>> {
  +id : Integer
  +text : String
  +createdAt : LocalDateTime
  --
  +type : Integer
  +queue : Integer
  +due : Integer
  +ivl : Integer
  +factor : Integer
  +reps : Integer
  +lapses : Integer
  +stepsLeft : Integer
}

' ======= Перечисления (Enum) =======
enum IntervalUnit {
  MIN
  DAY
}

enum ReviewAnswer {
  AGAIN
  HARD
  GOOD
  EASY
}

' ======= Связи =======
' Пользователь владеет многими коллекциями
User "1" --> "0..*" Collection : collections

' Коллекция владеет многими карточками
Collection "1" --> "0..*" Card : cards

' Карточка содержит Map<ReviewAnswer, NextIntervalDto>
Card .. ReviewAnswer : newIntervals (ключ)

@enduml

@startuml
' Отключаем иконки видимости у атрибутов
skinparam classAttributeIconSize 0

' ===================== Классы-сущности =====================
class Пользователь <<entity>> {
  id : Integer
  email : String
  password : String
  --
  установить значение поля(значение) : void
  получить значение поля() : значение
}

class Коллекция <<entity>> {
  id : Integer
  name : String
  createdAt : LocalDateTime
  --
  установить значение поля(значение) : void
  получить значение поля() : значение
}

class Карточка <<entity>> {
  id : Integer
  text : String
  createdAt : LocalDateTime
  type : Integer
  queue : Integer
  due : Integer
  ivl : Integer
  factor : Integer
  reps : Integer
  lapses : Integer
  stepsLeft : Integer
  --
  установить значение поля(значение) : void
  получить значение поля() : значение
}

' ===================== Перечисления =====================
enum Единица_Интервала {
  минуты
  дни
}

enum Оценка_Повтора {
  еще раз
  сложно
  хорошо
  легко
}

' ===================== Связи =====================
' Агрегация: Пользователь ◇── Коллекция
Пользователь "1" o-- "0..*" Коллекция

' Композиция: Коллекция ◆── Карточка
Коллекция "1" *-- "0..*" Карточка

Единица_Интервала --> Карточка
Оценка_Повтора --> Карточка
@enduml

@startuml
skinparam classAttributeIconSize 0

' ===================== Классы-сущности =====================
class Пользователь {
  почта: Строка
  пароль: Строка
  --
  установить значение поля(значение) : пусто
  получить значение поля(): значение
}

class Коллекция {
  идентификатор: Целое
  имя: Строка
  создано в: Дата и время
  --
  установить значение поля(значение): пусто
  получить значение поля(): значение
}

class Карточка {
  текст: Строка
  создано в: Дата и время
  тип: Целое
  очередь: Целое
  срок: Целое
  интервал: Целое
  коэффициент: Целое
  повторения: Целое
  срывы: Целое
  шагов осталось: Целое
  --
  установить значение поля(значение): пусто
  получить значение поля(): значение
}

' ===================== Перечисления =====================
enum Единица_Интервала {
  минуты
  дни
}

enum Оценка_Повтора {
  ещё раз
  сложно
  хорошо
  легко
}

' ===================== Связи =====================
Пользователь "1" o-- "0..*" Коллекция
Коллекция  "1" *-- "0..*" Карточка

Единица_Интервала --> Карточка
Оценка_Повтора    --> Карточка
@enduml

@startuml
left to right direction
skinparam classAttributeIconSize 0
'===================== Сущности =====================

class Card <<entity>> {
  -id: Integer
  -text: String
  -createdAt: LocalDateTime
  -type: Integer
  -queue: Integer
  -due: Integer
  -ivl: Integer
  -factor: Integer
  -reps: Integer
  -lapses: Integer
  -stepsLeft: Integer
  -collection: Collection
  --
  +getId(): Integer
  +setId(id: Integer): void
  +getText(): String
  +setText(text: String): void
  +getCreatedAt(): LocalDateTime
  +setCreatedAt(dt: LocalDateTime): void
  +getType(): Integer
  +setType(t: Integer): void
  +getQueue(): Integer
  +setQueue(q: Integer): void
  +getDue(): Integer
  +setDue(d: Integer): void
  +getIvl(): Integer
  +setIvl(i: Integer): void
  +getFactor(): Integer
  +setFactor(f: Integer): void
  +getReps(): Integer
  +setReps(r: Integer): void
  +getLapses(): Integer
  +setLapses(l: Integer): void
  +getStepsLeft(): Integer
  +setStepsLeft(s: Integer): void
  +getCollection(): Collection
  +setCollection(c: Collection): void
}
class User <<entity>> {
  +id: Integer
  +email: String
  +password: String
  +collections: Set<Collection>
  --
  +getId(): Integer
  +setId(id: Integer): void
  +getEmail(): String
  +setEmail(email: String): void
  +getPassword(): String
  +setPassword(pwd: String): void
  +getCollections(): Set<Collection>
  +setCollections(c: Set<Collection>): void
}

class Collection <<entity>> {
  +id: Integer
  +name: String
  +createdAt: LocalDateTime
  +user: User
  +cards: Set<Card>
  --
  +getId(): Integer
  +setId(id: Integer): void
  +getName(): String
  +setName(name: String): void
  +getCreatedAt(): LocalDateTime
  +setCreatedAt(dt: LocalDateTime): void
  +getUser(): User
  +setUser(u: User): void
  +getCards(): Set<Card>
  +setCards(cs: Set<Card>): void
}


'===================== Перечисления =====================
enum IntervalUnit {
  MIN
  DAY
  --
  +name(): String
  +value(): int
}

enum ReviewAnswer {
  AGAIN
  HARD
  GOOD
  EASY
  --
  +name(): String
  +value(): int
}

'===================== Связи =====================
' Агрегация: User ◇── Collection
User "1" o-- "0..*" Collection

' Композиция: Collection ◆── Card
Collection "1" *-- "0..*" Card

' Ассоциации перечислений
IntervalUnit --> Card
ReviewAnswer --> Card

@enduml

@startuml
title Процесс обучения

' Объявляем состояния с помощью ключевого слова state и даём им алиасы:
state "Первое знакомство\n(Чтение/Видео/Лекция)" as A
state "Конспектирование" as B
state "Повторение" as C

' Начальное псевдосостояние с переходом в узел A
[*] --> A

' Обычные переходы между состояниями
A --> B
B --> C

' Рефлексивная (самопереходящая) стрелка у состояния "Повторение"
C --> C : очередной\nповтор

@enduml
