@startuml
!pragma layout smetana                       ' горизонтальная ориентация

'‑‑‑ Цвета состояний
skinparam state<<New>>        BackgroundColor LightBlue
skinparam state<<Learning>>   BackgroundColor LightYellow
skinparam state<<Review>>     BackgroundColor LightGreen
skinparam state<<Relearning>> BackgroundColor LightSalmon

[*] --> New

state New <<New>>
New : Шаги изучения\n1 м → 10 м → 1 дн…

New --> Learning : показать карту

state Learning <<Learning>>
Learning : Фаза обучения\n(10 м → 1 дн)

' ——— переходы внутри Learning ———
Learning --> Learning
note on link
  **Again** — повторить тот же шаг
  **Hard**  — тот же шаг × HardFactor
end note

Learning --> Review
note on link
  **Good** (последний шаг) — выпуск в Review
  **Easy** — выпуск в Review, интервал 2 дн
end note

state Review <<Review>>
Review : Повторение по SRS

' ——— переходы внутри Review ———
Review --> Review
note on link
  **Hard** — ivl × hardFactor
  **Good** — ivl × easeFactor
  **Easy** — ivl × easeFactor × easyBonus
end note

Review --> Relearning
note on link
  **Again** — ошибка ⇒ карта в Relearning
end note

state Relearning <<Relearning>>
Relearning : Шаги переобучения

Relearning --> Review : по завершении шагов
@enduml

@startuml
|User|
start

:Получить prevIvl из cards.ivl;
:Вычислить delay = daysLate(card);

if (ответ = Again?) then (да)
  :Перевести карточку в Relearning;
  stop
else (нет)
  if (ответ = Hard?) then (да)
    :newIvl = prevIvl * hardInterval * intervalModifier;
  else (нет)
    if (ответ = Good?) then (да)
      :newIvl = (prevIvl + delay/2) * ease * intervalModifier;
    else
      :newIvl = (prevIvl + delay) * ease * easyBonus * intervalModifier;
    endif
  endif
endif

:Ограничить newIvl (≥1, ≤maxInterval);
:Сохранить newIvl в cards.ivl;
stop
@enduml


@startuml
title Цикл Active Recall

state Чтение
state "Активное\nвоспоминание"
state Повторение

[*] --> Чтение
Чтение --> "Активное\nвоспоминание"
"Активное\nвоспоминание" --> Повторение
Повторение --> Чтение
@enduml
@startuml
title Цикл активное воспоминание
left to right direction

state S1 as "Чтение"
state S2 as "Активное\nвоспоминание"
state S3 as "Повторение"

[*] --> S1
S1 --> S2
S2 --> S3
S3 --> S1
@enduml

@startuml
!pragma layout smetana
skinparam componentStyle rectangle

' Внешний клиент
rectangle "Клиент" as Client

' Фронтенд
rectangle "Frontend\n(React)" as Frontend {
  component "Pages\n(React Views)" as Pages
  component "UI Components\n(Контейнеры)" as UI
  component "State Management\n(Redux/Context)" as State
  component "Custom Hooks\n(Переиспольз. логика)" as Hooks
  component "Routing\n(React Router)" as Routing
  component "GraphQL Client\n(Apollo Client)" as GQLClient
}

' Бэкенд
rectangle "Backend\n(Spring Boot + GraphQL)" as Backend {
  component "GraphQL Endpoint\n(Spring for GraphQL)" as GQLEndpoint
  component "Сервисный слой\n(Services)" as Service
  component "Слой доступа к данным\n(JPA Repositories)" as DAO
  component "Сервис аутентификации\n(Spring Security + JWT)" as Auth
}

' База данных
database "PostgreSQL" as DB

' Связи между основными подсистемами
Client --> Frontend : "HTTP/HTTPS запросы"

' Внутренние связи фронтенда
Pages --> UI : "Композиция интерфейса"
Pages --> State : "Чтение/обновление состояния"
UI --> State : "Диспетчеризация действий"
Routing --> Pages : "Маршрутизация"
Pages --> GQLClient : "Обращение к API"
Hooks --> Pages : "Переисп. логика"

' Внутренние связи бэкенда
GQLClient --> GQLEndpoint : "HTTP GraphQL"
GQLEndpoint --> Service : "Вызов сервисов"
Service --> DAO : "Работа с репозиториями"
Auth --> GQLEndpoint : "Проверка токена"
Auth --> DAO : "Получение учётных данных"

' Связь DAO с БД
DAO --> DB : "JDBC / Hibernate"

@enduml

@startuml
!pragma layout smetana
left to right direction
actor "Гость" as Guest
actor "Пользователь" as User


(Регистрация) as UC_Register
(Логин)       as UC_Login
(Просмотр колод) as UC_ViewColl
(Создать колоду) as UC_AddColl
(Удалить колоду) as UC_DelColl
(Добавить/редактировать карточку) as UC_SaveCard
(Просмотр/поиск карточек) as UC_EditCards
(Запуск сессии\nобучения/повторения) as UC_StartLearn
(Оценить карточку) as UC_Review
(Видеть счётчики\nпрогресса) as UC_Counters

Guest --> UC_Register
Guest --> UC_Login

User --> UC_ViewColl
User --> UC_AddColl
User --> UC_DelColl
User --> UC_SaveCard
User --> UC_EditCards
User --> UC_StartLearn
User --> UC_Review
User --> UC_Counters
@enduml

@startuml
' ========== SEQUENCE: Режим обучения ==========
autonumber
skinparam sequenceMessageAlign center

actor  Пользователь as User
participant "Компонент\nRepeatCards (React)"    as react
participant "Сервер"              as serv
database   "PostgreSQL"                         as db

== 1. Старт сессии обучения ==
User   -> react  : клик «Начать обучение»
react  -> serv : http запрос
serv    -> db   : SELECT карточки, \nкоторые надо просмотреть
db     --> serv
serv -> db : UPDATE новые карточки
serv    --> react : список с интервалами
react --> User  : отрисовать карты

== 2. Ответ пользователя на карточку ==
loop пока есть карточки
  User -> react : Оценить карточку
  react  -> serv : http запрос
  serv -> serv : выполнить алгоритм \nинтервального повторения
  serv    -> db   : UPDATE SRS‑полей
  react --> User : показать следующую карту
end

== 3. Завершение сессии ==
react --> User : «Все карточки\nпройдены»
@enduml
