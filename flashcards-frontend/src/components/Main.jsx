import React, {useState} from 'react';
import {Container, Button, Form, Spinner, Table} from 'react-bootstrap';
import {gql, useQuery, useMutation} from '@apollo/client';
import {useNavigate} from 'react-router-dom';
import {jwtDecode} from 'jwt-decode';
import {Link} from 'react-router-dom';

function getUserIdFromToken() {
    const token = localStorage.getItem('token');
    if (!token) return null;
    try {
        const decoded = jwtDecode(token);
        return decoded.id; // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ —Ç–æ–∫–µ–Ω–µ –ø–æ–ª–µ "id"
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', error);
        return null;
    }
}

const GET_COLLECTIONS = gql`
    query GetCollections($userId: ID!) {
        collectionsByUserId(userId: $userId) {
            id
            name
            countCards
        }
    }
`;

const SAVE_COLLECTION = gql`
    mutation SaveCollection($collection: CollectionInp!) {
        saveCollection(collection: $collection) {
            id
            name
        }
    }
`;

// –ù–æ–≤–∞—è –º—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
const DELETE_COLLECTION = gql`
    mutation DeleteCollection($id: ID!) {
        deleteCollection(id: $id)
    }
`;

const Main = () => {
    const userId = getUserIdFromToken();
    const navigate = useNavigate();

    const [newName, setNewName] = useState('');
    const [showCreateButton, setShowCreateButton] = useState(false);
    const [collectionToDelete, setCollectionToDelete] = useState(null);

    const {loading, error, data, refetch} = useQuery(GET_COLLECTIONS, {
        variables: {userId},
        skip: !userId,
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fetchPolicy: 'cache-and-network' –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    });

    const [saveCollection] = useMutation(SAVE_COLLECTION, {
        onCompleted: () => {
            setNewName('');
            setShowCreateButton(false);
            refetch();
        },
    });

    const [deleteCollection] = useMutation(DELETE_COLLECTION, {
        onCompleted: (data) => {
            // –ï—Å–ª–∏ mutation –≤–µ—Ä–Ω—É–ª–∞ true, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–±–æ –ø–æ–ª–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ refetch
            if (data.deleteCollection) {
                setCollectionToDelete(null);
                refetch();
            }
        },
    });

    const handleCreateCollection = () => {
        if (!newName.trim()) return;
        saveCollection({
            variables: {
                collection: {
                    name: newName,
                    user: {id: userId},
                },
            },
        });
    };

    const handleShowDelete = (id) => {
        setCollectionToDelete(id);
    };

    const handleConfirmDelete = (id) => {
        deleteCollection({
            variables: {id},
        });
    };

    const handleCancelDelete = () => {
        setCollectionToDelete(null);
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    const handleAddCards = (collectionId) => {
        navigate(`/collection/${collectionId}`);
    };

    if (!userId) {
        return <Container className="mt-4">–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</Container>;
    }

    if (loading)
        return (
            <Container className="mt-4">
                <Spinner animation="border"/>
            </Container>
        );
    if (error)
        return <Container className="mt-4">–û—à–∏–±–∫–∞: {error.message}</Container>;

    return (
        <Container className="mt-4" style={{maxWidth: '66%'}}>
            <h2>–°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>

            <div className="p-3 mb-4 bg-white rounded shadow">
                <Table bordered hover responsive className="mb-0">
                    <thead>
                    <tr>
                        <th style={{width: '40%'}}>–ö–æ–ª–ª–µ–∫—Ü–∏—è</th>
                        <th>–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫</th>
                        <th>–ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</th>
                        <th>–ö –ø—Ä–æ—Å–º–æ—Ç—Ä—É</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                    </thead>
                    <tbody>
                    {data.collectionsByUserId.map((col) => (
                        <tr key={col.id}>
                            <td>
                                <Link to={`/repeat/${col.id}`}>{col.name}</Link>
                            </td>
                            <td>{col.countCards}</td>
                            <td>
                                <span className="text-primary">0</span>
                            </td>
                            <td>
                                <span className="text-success">0</span>
                            </td>
                            <td>
                                <Button
                                    variant="outline-primary"
                                    size="sm"
                                    onClick={() => handleAddCards(col.id)}
                                    style={{marginRight: '5px'}}
                                >
                                    +
                                </Button>
                                {collectionToDelete !== col.id ? (
                                    <span
                                        style={{cursor: 'pointer', color: 'gray'}}
                                        onMouseEnter={(e) => (e.currentTarget.style.color = 'red')}
                                        onMouseLeave={(e) => (e.currentTarget.style.color = 'gray')}
                                        onClick={() => handleShowDelete(col.id)}
                                    >
                      üóë
                    </span>
                                ) : (
                                    <span>
                      –£–¥–∞–ª–∏—Ç—å?{' '}
                                        <Button
                                            variant="outline-success"
                                            size="sm"
                                            onClick={() => handleConfirmDelete(col.id)}
                                        >
                        ‚úì
                      </Button>{' '}
                                        <Button variant="outline-danger" size="sm" onClick={handleCancelDelete}>
                        √ó
                      </Button>
                    </span>
                                )}
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </Table>
            </div>

            <div style={{marginTop: '20px', position: 'relative', width: '300px'}}>
                <Form.Control
                    type="text"
                    placeholder="–ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è"
                    value={newName}
                    onChange={(e) => {
                        setNewName(e.target.value);
                        setShowCreateButton(e.target.value.trim() !== '');
                    }}
                />
                {showCreateButton && newName.trim() && (
                    <Button
                        variant="success"
                        size="sm"
                        style={{position: 'absolute', right: '-50px', top: '0'}}
                        onClick={handleCreateCollection}
                    >
                        ‚úì
                    </Button>
                )}
            </div>
        </Container>
    );
};

export default Main;
